# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simavr', [dirname(__file__)])
        except ImportError:
            import _simavr
            return _simavr
        if fp is not None:
            try:
                _mod = imp.load_module('_simavr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _simavr = swig_import_helper()
    del swig_import_helper
else:
    import _simavr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def AVR_IOCTL_IOPORT_GETIRQ(_name):
    return _simavr.AVR_IOCTL_IOPORT_GETIRQ(_name)
AVR_IOCTL_IOPORT_GETIRQ = _simavr.AVR_IOCTL_IOPORT_GETIRQ

def get_irq_at(irq, index):
    return _simavr.get_irq_at(irq, index)
get_irq_at = _simavr.get_irq_at

def avr_thread(ignore):
    return _simavr.avr_thread(ignore)
avr_thread = _simavr.avr_thread

def avr_start_thread(avr):
    return _simavr.avr_start_thread(avr)
avr_start_thread = _simavr.avr_start_thread

def avr_terminate_thread():
    return _simavr.avr_terminate_thread()
avr_terminate_thread = _simavr.avr_terminate_thread

def avr_pause_thread():
    return _simavr.avr_pause_thread()
avr_pause_thread = _simavr.avr_pause_thread

def avr_continue_thread():
    return _simavr.avr_continue_thread()
avr_continue_thread = _simavr.avr_continue_thread

def avr_step_thread(steps):
    return _simavr.avr_step_thread(steps)
avr_step_thread = _simavr.avr_step_thread

def avr_fpeek(avr, addr):
    return _simavr.avr_fpeek(avr, addr)
avr_fpeek = _simavr.avr_fpeek

def avr_peek(avr, addr):
    return _simavr.avr_peek(avr, addr)
avr_peek = _simavr.avr_peek

def avr_thread_goto_cycle(avr, cycles):
    return _simavr.avr_thread_goto_cycle(avr, cycles)
avr_thread_goto_cycle = _simavr.avr_thread_goto_cycle
class avr_regbit_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_regbit_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_regbit_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reg"] = _simavr.avr_regbit_t_reg_set
    __swig_getmethods__["reg"] = _simavr.avr_regbit_t_reg_get
    if _newclass:
        reg = _swig_property(_simavr.avr_regbit_t_reg_get, _simavr.avr_regbit_t_reg_set)
    __swig_setmethods__["bit"] = _simavr.avr_regbit_t_bit_set
    __swig_getmethods__["bit"] = _simavr.avr_regbit_t_bit_get
    if _newclass:
        bit = _swig_property(_simavr.avr_regbit_t_bit_get, _simavr.avr_regbit_t_bit_set)
    __swig_setmethods__["mask"] = _simavr.avr_regbit_t_mask_set
    __swig_getmethods__["mask"] = _simavr.avr_regbit_t_mask_get
    if _newclass:
        mask = _swig_property(_simavr.avr_regbit_t_mask_get, _simavr.avr_regbit_t_mask_set)

    def __init__(self):
        this = _simavr.new_avr_regbit_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_regbit_t
    __del__ = lambda self: None
avr_regbit_t_swigregister = _simavr.avr_regbit_t_swigregister
avr_regbit_t_swigregister(avr_regbit_t)
cvar = _simavr.cvar


_simavr.IRQ_FLAG_NOT_swigconstant(_simavr)
IRQ_FLAG_NOT = _simavr.IRQ_FLAG_NOT

_simavr.IRQ_FLAG_FILTERED_swigconstant(_simavr)
IRQ_FLAG_FILTERED = _simavr.IRQ_FLAG_FILTERED

_simavr.IRQ_FLAG_ALLOC_swigconstant(_simavr)
IRQ_FLAG_ALLOC = _simavr.IRQ_FLAG_ALLOC

_simavr.IRQ_FLAG_INIT_swigconstant(_simavr)
IRQ_FLAG_INIT = _simavr.IRQ_FLAG_INIT
class avr_irq_pool_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_irq_pool_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_irq_pool_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _simavr.avr_irq_pool_t_count_set
    __swig_getmethods__["count"] = _simavr.avr_irq_pool_t_count_get
    if _newclass:
        count = _swig_property(_simavr.avr_irq_pool_t_count_get, _simavr.avr_irq_pool_t_count_set)
    __swig_setmethods__["irq"] = _simavr.avr_irq_pool_t_irq_set
    __swig_getmethods__["irq"] = _simavr.avr_irq_pool_t_irq_get
    if _newclass:
        irq = _swig_property(_simavr.avr_irq_pool_t_irq_get, _simavr.avr_irq_pool_t_irq_set)

    def __init__(self):
        this = _simavr.new_avr_irq_pool_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_irq_pool_t
    __del__ = lambda self: None
avr_irq_pool_t_swigregister = _simavr.avr_irq_pool_t_swigregister
avr_irq_pool_t_swigregister(avr_irq_pool_t)

class avr_irq_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_irq_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_irq_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pool"] = _simavr.avr_irq_t_pool_set
    __swig_getmethods__["pool"] = _simavr.avr_irq_t_pool_get
    if _newclass:
        pool = _swig_property(_simavr.avr_irq_t_pool_get, _simavr.avr_irq_t_pool_set)
    __swig_setmethods__["name"] = _simavr.avr_irq_t_name_set
    __swig_getmethods__["name"] = _simavr.avr_irq_t_name_get
    if _newclass:
        name = _swig_property(_simavr.avr_irq_t_name_get, _simavr.avr_irq_t_name_set)
    __swig_setmethods__["irq"] = _simavr.avr_irq_t_irq_set
    __swig_getmethods__["irq"] = _simavr.avr_irq_t_irq_get
    if _newclass:
        irq = _swig_property(_simavr.avr_irq_t_irq_get, _simavr.avr_irq_t_irq_set)
    __swig_setmethods__["value"] = _simavr.avr_irq_t_value_set
    __swig_getmethods__["value"] = _simavr.avr_irq_t_value_get
    if _newclass:
        value = _swig_property(_simavr.avr_irq_t_value_get, _simavr.avr_irq_t_value_set)
    __swig_setmethods__["flags"] = _simavr.avr_irq_t_flags_set
    __swig_getmethods__["flags"] = _simavr.avr_irq_t_flags_get
    if _newclass:
        flags = _swig_property(_simavr.avr_irq_t_flags_get, _simavr.avr_irq_t_flags_set)
    __swig_setmethods__["hook"] = _simavr.avr_irq_t_hook_set
    __swig_getmethods__["hook"] = _simavr.avr_irq_t_hook_get
    if _newclass:
        hook = _swig_property(_simavr.avr_irq_t_hook_get, _simavr.avr_irq_t_hook_set)

    def __init__(self):
        this = _simavr.new_avr_irq_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_irq_t
    __del__ = lambda self: None
avr_irq_t_swigregister = _simavr.avr_irq_t_swigregister
avr_irq_t_swigregister(avr_irq_t)


def avr_alloc_irq(pool, base, count, names):
    return _simavr.avr_alloc_irq(pool, base, count, names)
avr_alloc_irq = _simavr.avr_alloc_irq

def avr_free_irq(irq, count):
    return _simavr.avr_free_irq(irq, count)
avr_free_irq = _simavr.avr_free_irq

def avr_init_irq(pool, irq, base, count, names):
    return _simavr.avr_init_irq(pool, irq, base, count, names)
avr_init_irq = _simavr.avr_init_irq

def avr_raise_irq(irq, value):
    return _simavr.avr_raise_irq(irq, value)
avr_raise_irq = _simavr.avr_raise_irq

def avr_connect_irq(src, dst):
    return _simavr.avr_connect_irq(src, dst)
avr_connect_irq = _simavr.avr_connect_irq

def avr_unconnect_irq(src, dst):
    return _simavr.avr_unconnect_irq(src, dst)
avr_unconnect_irq = _simavr.avr_unconnect_irq

def avr_irq_register_notify(irq, notify, param):
    return _simavr.avr_irq_register_notify(irq, notify, param)
avr_irq_register_notify = _simavr.avr_irq_register_notify

def avr_irq_unregister_notify(irq, notify, param):
    return _simavr.avr_irq_unregister_notify(irq, notify, param)
avr_irq_unregister_notify = _simavr.avr_irq_unregister_notify
class avr_io_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_io_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_io_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _simavr.avr_io_t_next_set
    __swig_getmethods__["next"] = _simavr.avr_io_t_next_get
    if _newclass:
        next = _swig_property(_simavr.avr_io_t_next_get, _simavr.avr_io_t_next_set)
    __swig_setmethods__["avr"] = _simavr.avr_io_t_avr_set
    __swig_getmethods__["avr"] = _simavr.avr_io_t_avr_get
    if _newclass:
        avr = _swig_property(_simavr.avr_io_t_avr_get, _simavr.avr_io_t_avr_set)
    __swig_setmethods__["kind"] = _simavr.avr_io_t_kind_set
    __swig_getmethods__["kind"] = _simavr.avr_io_t_kind_get
    if _newclass:
        kind = _swig_property(_simavr.avr_io_t_kind_get, _simavr.avr_io_t_kind_set)
    __swig_setmethods__["irq_names"] = _simavr.avr_io_t_irq_names_set
    __swig_getmethods__["irq_names"] = _simavr.avr_io_t_irq_names_get
    if _newclass:
        irq_names = _swig_property(_simavr.avr_io_t_irq_names_get, _simavr.avr_io_t_irq_names_set)
    __swig_setmethods__["irq_ioctl_get"] = _simavr.avr_io_t_irq_ioctl_get_set
    __swig_getmethods__["irq_ioctl_get"] = _simavr.avr_io_t_irq_ioctl_get_get
    if _newclass:
        irq_ioctl_get = _swig_property(_simavr.avr_io_t_irq_ioctl_get_get, _simavr.avr_io_t_irq_ioctl_get_set)
    __swig_setmethods__["irq_count"] = _simavr.avr_io_t_irq_count_set
    __swig_getmethods__["irq_count"] = _simavr.avr_io_t_irq_count_get
    if _newclass:
        irq_count = _swig_property(_simavr.avr_io_t_irq_count_get, _simavr.avr_io_t_irq_count_set)
    __swig_setmethods__["irq"] = _simavr.avr_io_t_irq_set
    __swig_getmethods__["irq"] = _simavr.avr_io_t_irq_get
    if _newclass:
        irq = _swig_property(_simavr.avr_io_t_irq_get, _simavr.avr_io_t_irq_set)
    __swig_setmethods__["reset"] = _simavr.avr_io_t_reset_set
    __swig_getmethods__["reset"] = _simavr.avr_io_t_reset_get
    if _newclass:
        reset = _swig_property(_simavr.avr_io_t_reset_get, _simavr.avr_io_t_reset_set)
    __swig_setmethods__["ioctl"] = _simavr.avr_io_t_ioctl_set
    __swig_getmethods__["ioctl"] = _simavr.avr_io_t_ioctl_get
    if _newclass:
        ioctl = _swig_property(_simavr.avr_io_t_ioctl_get, _simavr.avr_io_t_ioctl_set)
    __swig_setmethods__["dealloc"] = _simavr.avr_io_t_dealloc_set
    __swig_getmethods__["dealloc"] = _simavr.avr_io_t_dealloc_get
    if _newclass:
        dealloc = _swig_property(_simavr.avr_io_t_dealloc_get, _simavr.avr_io_t_dealloc_set)

    def __init__(self):
        this = _simavr.new_avr_io_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_io_t
    __del__ = lambda self: None
avr_io_t_swigregister = _simavr.avr_io_t_swigregister
avr_io_t_swigregister(avr_io_t)


def avr_register_io(avr, io):
    return _simavr.avr_register_io(avr, io)
avr_register_io = _simavr.avr_register_io

def avr_io_setirqs(io, ctl, count, irqs):
    return _simavr.avr_io_setirqs(io, ctl, count, irqs)
avr_io_setirqs = _simavr.avr_io_setirqs

def avr_register_io_read(avr, addr, read, param):
    return _simavr.avr_register_io_read(avr, addr, read, param)
avr_register_io_read = _simavr.avr_register_io_read

def avr_register_io_write(avr, addr, write, param):
    return _simavr.avr_register_io_write(avr, addr, write, param)
avr_register_io_write = _simavr.avr_register_io_write

def avr_ioctl(avr, ctl, io_param):
    return _simavr.avr_ioctl(avr, ctl, io_param)
avr_ioctl = _simavr.avr_ioctl

def avr_io_getirq(avr, ctl, index):
    return _simavr.avr_io_getirq(avr, ctl, index)
avr_io_getirq = _simavr.avr_io_getirq

_simavr.AVR_IOMEM_IRQ_ALL_swigconstant(_simavr)
AVR_IOMEM_IRQ_ALL = _simavr.AVR_IOMEM_IRQ_ALL

def avr_iomem_getirq(avr, addr, name, index):
    return _simavr.avr_iomem_getirq(avr, addr, name, index)
avr_iomem_getirq = _simavr.avr_iomem_getirq

def avr_deallocate_ios(avr):
    return _simavr.avr_deallocate_ios(avr)
avr_deallocate_ios = _simavr.avr_deallocate_ios

_simavr.S_C_swigconstant(_simavr)
S_C = _simavr.S_C

_simavr.S_Z_swigconstant(_simavr)
S_Z = _simavr.S_Z

_simavr.S_N_swigconstant(_simavr)
S_N = _simavr.S_N

_simavr.S_V_swigconstant(_simavr)
S_V = _simavr.S_V

_simavr.S_S_swigconstant(_simavr)
S_S = _simavr.S_S

_simavr.S_H_swigconstant(_simavr)
S_H = _simavr.S_H

_simavr.S_T_swigconstant(_simavr)
S_T = _simavr.S_T

_simavr.S_I_swigconstant(_simavr)
S_I = _simavr.S_I

_simavr.R_XL_swigconstant(_simavr)
R_XL = _simavr.R_XL

_simavr.R_XH_swigconstant(_simavr)
R_XH = _simavr.R_XH

_simavr.R_YL_swigconstant(_simavr)
R_YL = _simavr.R_YL

_simavr.R_YH_swigconstant(_simavr)
R_YH = _simavr.R_YH

_simavr.R_ZL_swigconstant(_simavr)
R_ZL = _simavr.R_ZL

_simavr.R_ZH_swigconstant(_simavr)
R_ZH = _simavr.R_ZH

_simavr.R_SPL_swigconstant(_simavr)
R_SPL = _simavr.R_SPL

_simavr.R_SPH_swigconstant(_simavr)
R_SPH = _simavr.R_SPH

_simavr.R_SREG_swigconstant(_simavr)
R_SREG = _simavr.R_SREG

_simavr.MAX_IOs_swigconstant(_simavr)
MAX_IOs = _simavr.MAX_IOs

_simavr.LOG_OUTPUT_swigconstant(_simavr)
LOG_OUTPUT = _simavr.LOG_OUTPUT

_simavr.LOG_ERROR_swigconstant(_simavr)
LOG_ERROR = _simavr.LOG_ERROR

_simavr.LOG_WARNING_swigconstant(_simavr)
LOG_WARNING = _simavr.LOG_WARNING

_simavr.LOG_TRACE_swigconstant(_simavr)
LOG_TRACE = _simavr.LOG_TRACE

_simavr.cpu_Limbo_swigconstant(_simavr)
cpu_Limbo = _simavr.cpu_Limbo

_simavr.cpu_Stopped_swigconstant(_simavr)
cpu_Stopped = _simavr.cpu_Stopped

_simavr.cpu_Running_swigconstant(_simavr)
cpu_Running = _simavr.cpu_Running

_simavr.cpu_Sleeping_swigconstant(_simavr)
cpu_Sleeping = _simavr.cpu_Sleeping

_simavr.cpu_Step_swigconstant(_simavr)
cpu_Step = _simavr.cpu_Step

_simavr.cpu_StepDone_swigconstant(_simavr)
cpu_StepDone = _simavr.cpu_StepDone

_simavr.cpu_Done_swigconstant(_simavr)
cpu_Done = _simavr.cpu_Done

_simavr.cpu_Crashed_swigconstant(_simavr)
cpu_Crashed = _simavr.cpu_Crashed
class avr_trace_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_trace_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_trace_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["codeline"] = _simavr.avr_trace_data_t_codeline_set
    __swig_getmethods__["codeline"] = _simavr.avr_trace_data_t_codeline_get
    if _newclass:
        codeline = _swig_property(_simavr.avr_trace_data_t_codeline_get, _simavr.avr_trace_data_t_codeline_set)
    __swig_getmethods__["old"] = _simavr.avr_trace_data_t_old_get
    if _newclass:
        old = _swig_property(_simavr.avr_trace_data_t_old_get)
    __swig_setmethods__["old_pci"] = _simavr.avr_trace_data_t_old_pci_set
    __swig_getmethods__["old_pci"] = _simavr.avr_trace_data_t_old_pci_get
    if _newclass:
        old_pci = _swig_property(_simavr.avr_trace_data_t_old_pci_get, _simavr.avr_trace_data_t_old_pci_set)
    __swig_setmethods__["touched"] = _simavr.avr_trace_data_t_touched_set
    __swig_getmethods__["touched"] = _simavr.avr_trace_data_t_touched_get
    if _newclass:
        touched = _swig_property(_simavr.avr_trace_data_t_touched_get, _simavr.avr_trace_data_t_touched_set)

    def __init__(self):
        this = _simavr.new_avr_trace_data_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_trace_data_t
    __del__ = lambda self: None
avr_trace_data_t_swigregister = _simavr.avr_trace_data_t_swigregister
avr_trace_data_t_swigregister(avr_trace_data_t)

_simavr.OLD_PC_SIZE_swigconstant(_simavr)
OLD_PC_SIZE = _simavr.OLD_PC_SIZE

class avr_trace_data_t_old(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_trace_data_t_old, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_trace_data_t_old, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pc"] = _simavr.avr_trace_data_t_old_pc_set
    __swig_getmethods__["pc"] = _simavr.avr_trace_data_t_old_pc_get
    if _newclass:
        pc = _swig_property(_simavr.avr_trace_data_t_old_pc_get, _simavr.avr_trace_data_t_old_pc_set)
    __swig_setmethods__["sp"] = _simavr.avr_trace_data_t_old_sp_set
    __swig_getmethods__["sp"] = _simavr.avr_trace_data_t_old_sp_get
    if _newclass:
        sp = _swig_property(_simavr.avr_trace_data_t_old_sp_get, _simavr.avr_trace_data_t_old_sp_set)

    def __init__(self):
        this = _simavr.new_avr_trace_data_t_old()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_trace_data_t_old
    __del__ = lambda self: None
avr_trace_data_t_old_swigregister = _simavr.avr_trace_data_t_old_swigregister
avr_trace_data_t_old_swigregister(avr_trace_data_t_old)

class avr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mmcu"] = _simavr.avr_t_mmcu_set
    __swig_getmethods__["mmcu"] = _simavr.avr_t_mmcu_get
    if _newclass:
        mmcu = _swig_property(_simavr.avr_t_mmcu_get, _simavr.avr_t_mmcu_set)
    __swig_setmethods__["ramend"] = _simavr.avr_t_ramend_set
    __swig_getmethods__["ramend"] = _simavr.avr_t_ramend_get
    if _newclass:
        ramend = _swig_property(_simavr.avr_t_ramend_get, _simavr.avr_t_ramend_set)
    __swig_setmethods__["flashend"] = _simavr.avr_t_flashend_set
    __swig_getmethods__["flashend"] = _simavr.avr_t_flashend_get
    if _newclass:
        flashend = _swig_property(_simavr.avr_t_flashend_get, _simavr.avr_t_flashend_set)
    __swig_setmethods__["e2end"] = _simavr.avr_t_e2end_set
    __swig_getmethods__["e2end"] = _simavr.avr_t_e2end_get
    if _newclass:
        e2end = _swig_property(_simavr.avr_t_e2end_get, _simavr.avr_t_e2end_set)
    __swig_setmethods__["vector_size"] = _simavr.avr_t_vector_size_set
    __swig_getmethods__["vector_size"] = _simavr.avr_t_vector_size_get
    if _newclass:
        vector_size = _swig_property(_simavr.avr_t_vector_size_get, _simavr.avr_t_vector_size_set)
    __swig_setmethods__["signature"] = _simavr.avr_t_signature_set
    __swig_getmethods__["signature"] = _simavr.avr_t_signature_get
    if _newclass:
        signature = _swig_property(_simavr.avr_t_signature_get, _simavr.avr_t_signature_set)
    __swig_setmethods__["fuse"] = _simavr.avr_t_fuse_set
    __swig_getmethods__["fuse"] = _simavr.avr_t_fuse_get
    if _newclass:
        fuse = _swig_property(_simavr.avr_t_fuse_get, _simavr.avr_t_fuse_set)
    __swig_setmethods__["rampz"] = _simavr.avr_t_rampz_set
    __swig_getmethods__["rampz"] = _simavr.avr_t_rampz_get
    if _newclass:
        rampz = _swig_property(_simavr.avr_t_rampz_get, _simavr.avr_t_rampz_set)
    __swig_setmethods__["eind"] = _simavr.avr_t_eind_set
    __swig_getmethods__["eind"] = _simavr.avr_t_eind_get
    if _newclass:
        eind = _swig_property(_simavr.avr_t_eind_get, _simavr.avr_t_eind_set)
    __swig_setmethods__["address_size"] = _simavr.avr_t_address_size_set
    __swig_getmethods__["address_size"] = _simavr.avr_t_address_size_get
    if _newclass:
        address_size = _swig_property(_simavr.avr_t_address_size_get, _simavr.avr_t_address_size_set)
    __swig_setmethods__["codeend"] = _simavr.avr_t_codeend_set
    __swig_getmethods__["codeend"] = _simavr.avr_t_codeend_get
    if _newclass:
        codeend = _swig_property(_simavr.avr_t_codeend_get, _simavr.avr_t_codeend_set)
    __swig_setmethods__["state"] = _simavr.avr_t_state_set
    __swig_getmethods__["state"] = _simavr.avr_t_state_get
    if _newclass:
        state = _swig_property(_simavr.avr_t_state_get, _simavr.avr_t_state_set)
    __swig_setmethods__["frequency"] = _simavr.avr_t_frequency_set
    __swig_getmethods__["frequency"] = _simavr.avr_t_frequency_get
    if _newclass:
        frequency = _swig_property(_simavr.avr_t_frequency_get, _simavr.avr_t_frequency_set)
    __swig_setmethods__["vcc"] = _simavr.avr_t_vcc_set
    __swig_getmethods__["vcc"] = _simavr.avr_t_vcc_get
    if _newclass:
        vcc = _swig_property(_simavr.avr_t_vcc_get, _simavr.avr_t_vcc_set)
    __swig_setmethods__["avcc"] = _simavr.avr_t_avcc_set
    __swig_getmethods__["avcc"] = _simavr.avr_t_avcc_get
    if _newclass:
        avcc = _swig_property(_simavr.avr_t_avcc_get, _simavr.avr_t_avcc_set)
    __swig_setmethods__["aref"] = _simavr.avr_t_aref_set
    __swig_getmethods__["aref"] = _simavr.avr_t_aref_get
    if _newclass:
        aref = _swig_property(_simavr.avr_t_aref_get, _simavr.avr_t_aref_set)
    __swig_setmethods__["cycle"] = _simavr.avr_t_cycle_set
    __swig_getmethods__["cycle"] = _simavr.avr_t_cycle_get
    if _newclass:
        cycle = _swig_property(_simavr.avr_t_cycle_get, _simavr.avr_t_cycle_set)
    __swig_setmethods__["run_cycle_count"] = _simavr.avr_t_run_cycle_count_set
    __swig_getmethods__["run_cycle_count"] = _simavr.avr_t_run_cycle_count_get
    if _newclass:
        run_cycle_count = _swig_property(_simavr.avr_t_run_cycle_count_get, _simavr.avr_t_run_cycle_count_set)
    __swig_setmethods__["run_cycle_limit"] = _simavr.avr_t_run_cycle_limit_set
    __swig_getmethods__["run_cycle_limit"] = _simavr.avr_t_run_cycle_limit_get
    if _newclass:
        run_cycle_limit = _swig_property(_simavr.avr_t_run_cycle_limit_get, _simavr.avr_t_run_cycle_limit_set)
    __swig_setmethods__["sleep_usec"] = _simavr.avr_t_sleep_usec_set
    __swig_getmethods__["sleep_usec"] = _simavr.avr_t_sleep_usec_get
    if _newclass:
        sleep_usec = _swig_property(_simavr.avr_t_sleep_usec_get, _simavr.avr_t_sleep_usec_set)
    __swig_setmethods__["init"] = _simavr.avr_t_init_set
    __swig_getmethods__["init"] = _simavr.avr_t_init_get
    if _newclass:
        init = _swig_property(_simavr.avr_t_init_get, _simavr.avr_t_init_set)
    __swig_setmethods__["reset"] = _simavr.avr_t_reset_set
    __swig_getmethods__["reset"] = _simavr.avr_t_reset_get
    if _newclass:
        reset = _swig_property(_simavr.avr_t_reset_get, _simavr.avr_t_reset_set)
    __swig_getmethods__["custom"] = _simavr.avr_t_custom_get
    if _newclass:
        custom = _swig_property(_simavr.avr_t_custom_get)
    __swig_setmethods__["run"] = _simavr.avr_t_run_set
    __swig_getmethods__["run"] = _simavr.avr_t_run_get
    if _newclass:
        run = _swig_property(_simavr.avr_t_run_get, _simavr.avr_t_run_set)
    __swig_setmethods__["sleep"] = _simavr.avr_t_sleep_set
    __swig_getmethods__["sleep"] = _simavr.avr_t_sleep_get
    if _newclass:
        sleep = _swig_property(_simavr.avr_t_sleep_get, _simavr.avr_t_sleep_set)
    __swig_setmethods__["irq_pool"] = _simavr.avr_t_irq_pool_set
    __swig_getmethods__["irq_pool"] = _simavr.avr_t_irq_pool_get
    if _newclass:
        irq_pool = _swig_property(_simavr.avr_t_irq_pool_get, _simavr.avr_t_irq_pool_set)
    __swig_setmethods__["sreg"] = _simavr.avr_t_sreg_set
    __swig_getmethods__["sreg"] = _simavr.avr_t_sreg_get
    if _newclass:
        sreg = _swig_property(_simavr.avr_t_sreg_get, _simavr.avr_t_sreg_set)
    __swig_setmethods__["interrupt_state"] = _simavr.avr_t_interrupt_state_set
    __swig_getmethods__["interrupt_state"] = _simavr.avr_t_interrupt_state_get
    if _newclass:
        interrupt_state = _swig_property(_simavr.avr_t_interrupt_state_get, _simavr.avr_t_interrupt_state_set)
    __swig_setmethods__["pc"] = _simavr.avr_t_pc_set
    __swig_getmethods__["pc"] = _simavr.avr_t_pc_get
    if _newclass:
        pc = _swig_property(_simavr.avr_t_pc_get, _simavr.avr_t_pc_set)
    __swig_setmethods__["reset_pc"] = _simavr.avr_t_reset_pc_set
    __swig_getmethods__["reset_pc"] = _simavr.avr_t_reset_pc_get
    if _newclass:
        reset_pc = _swig_property(_simavr.avr_t_reset_pc_get, _simavr.avr_t_reset_pc_set)
    __swig_getmethods__["io"] = _simavr.avr_t_io_get
    if _newclass:
        io = _swig_property(_simavr.avr_t_io_get)
    __swig_setmethods__["io_shared_io_count"] = _simavr.avr_t_io_shared_io_count_set
    __swig_getmethods__["io_shared_io_count"] = _simavr.avr_t_io_shared_io_count_get
    if _newclass:
        io_shared_io_count = _swig_property(_simavr.avr_t_io_shared_io_count_get, _simavr.avr_t_io_shared_io_count_set)
    __swig_getmethods__["io_shared_io"] = _simavr.avr_t_io_shared_io_get
    if _newclass:
        io_shared_io = _swig_property(_simavr.avr_t_io_shared_io_get)
    __swig_setmethods__["flash"] = _simavr.avr_t_flash_set
    __swig_getmethods__["flash"] = _simavr.avr_t_flash_get
    if _newclass:
        flash = _swig_property(_simavr.avr_t_flash_get, _simavr.avr_t_flash_set)
    __swig_setmethods__["data"] = _simavr.avr_t_data_set
    __swig_getmethods__["data"] = _simavr.avr_t_data_get
    if _newclass:
        data = _swig_property(_simavr.avr_t_data_get, _simavr.avr_t_data_set)
    __swig_setmethods__["io_port"] = _simavr.avr_t_io_port_set
    __swig_getmethods__["io_port"] = _simavr.avr_t_io_port_get
    if _newclass:
        io_port = _swig_property(_simavr.avr_t_io_port_get, _simavr.avr_t_io_port_set)
    __swig_setmethods__["cycle_timers"] = _simavr.avr_t_cycle_timers_set
    __swig_getmethods__["cycle_timers"] = _simavr.avr_t_cycle_timers_get
    if _newclass:
        cycle_timers = _swig_property(_simavr.avr_t_cycle_timers_get, _simavr.avr_t_cycle_timers_set)
    __swig_setmethods__["interrupts"] = _simavr.avr_t_interrupts_set
    __swig_getmethods__["interrupts"] = _simavr.avr_t_interrupts_get
    if _newclass:
        interrupts = _swig_property(_simavr.avr_t_interrupts_get, _simavr.avr_t_interrupts_set)
    __swig_setmethods__["trace"] = _simavr.avr_t_trace_set
    __swig_getmethods__["trace"] = _simavr.avr_t_trace_get
    if _newclass:
        trace = _swig_property(_simavr.avr_t_trace_get, _simavr.avr_t_trace_set)
    __swig_setmethods__["log"] = _simavr.avr_t_log_set
    __swig_getmethods__["log"] = _simavr.avr_t_log_get
    if _newclass:
        log = _swig_property(_simavr.avr_t_log_get, _simavr.avr_t_log_set)
    __swig_setmethods__["trace_data"] = _simavr.avr_t_trace_data_set
    __swig_getmethods__["trace_data"] = _simavr.avr_t_trace_data_get
    if _newclass:
        trace_data = _swig_property(_simavr.avr_t_trace_data_get, _simavr.avr_t_trace_data_set)
    __swig_setmethods__["vcd"] = _simavr.avr_t_vcd_set
    __swig_getmethods__["vcd"] = _simavr.avr_t_vcd_get
    if _newclass:
        vcd = _swig_property(_simavr.avr_t_vcd_get, _simavr.avr_t_vcd_set)
    __swig_setmethods__["gdb"] = _simavr.avr_t_gdb_set
    __swig_getmethods__["gdb"] = _simavr.avr_t_gdb_get
    if _newclass:
        gdb = _swig_property(_simavr.avr_t_gdb_get, _simavr.avr_t_gdb_set)
    __swig_setmethods__["gdb_port"] = _simavr.avr_t_gdb_port_set
    __swig_getmethods__["gdb_port"] = _simavr.avr_t_gdb_port_get
    if _newclass:
        gdb_port = _swig_property(_simavr.avr_t_gdb_port_get, _simavr.avr_t_gdb_port_set)

    def __init__(self):
        this = _simavr.new_avr_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t
    __del__ = lambda self: None
avr_t_swigregister = _simavr.avr_t_swigregister
avr_t_swigregister(avr_t)

class avr_t_io_shared_io(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t_io_shared_io, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t_io_shared_io, name)
    __repr__ = _swig_repr
    __swig_setmethods__["used"] = _simavr.avr_t_io_shared_io_used_set
    __swig_getmethods__["used"] = _simavr.avr_t_io_shared_io_used_get
    if _newclass:
        used = _swig_property(_simavr.avr_t_io_shared_io_used_get, _simavr.avr_t_io_shared_io_used_set)
    __swig_getmethods__["io"] = _simavr.avr_t_io_shared_io_io_get
    if _newclass:
        io = _swig_property(_simavr.avr_t_io_shared_io_io_get)

    def __init__(self):
        this = _simavr.new_avr_t_io_shared_io()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t_io_shared_io
    __del__ = lambda self: None
avr_t_io_shared_io_swigregister = _simavr.avr_t_io_shared_io_swigregister
avr_t_io_shared_io_swigregister(avr_t_io_shared_io)

class avr_t_io_shared_io_io(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t_io_shared_io_io, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t_io_shared_io_io, name)
    __repr__ = _swig_repr
    __swig_setmethods__["param"] = _simavr.avr_t_io_shared_io_io_param_set
    __swig_getmethods__["param"] = _simavr.avr_t_io_shared_io_io_param_get
    if _newclass:
        param = _swig_property(_simavr.avr_t_io_shared_io_io_param_get, _simavr.avr_t_io_shared_io_io_param_set)
    __swig_setmethods__["c"] = _simavr.avr_t_io_shared_io_io_c_set
    __swig_getmethods__["c"] = _simavr.avr_t_io_shared_io_io_c_get
    if _newclass:
        c = _swig_property(_simavr.avr_t_io_shared_io_io_c_get, _simavr.avr_t_io_shared_io_io_c_set)

    def __init__(self):
        this = _simavr.new_avr_t_io_shared_io_io()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t_io_shared_io_io
    __del__ = lambda self: None
avr_t_io_shared_io_io_swigregister = _simavr.avr_t_io_shared_io_io_swigregister
avr_t_io_shared_io_io_swigregister(avr_t_io_shared_io_io)

class avr_t_io(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t_io, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t_io, name)
    __repr__ = _swig_repr
    __swig_setmethods__["irq"] = _simavr.avr_t_io_irq_set
    __swig_getmethods__["irq"] = _simavr.avr_t_io_irq_get
    if _newclass:
        irq = _swig_property(_simavr.avr_t_io_irq_get, _simavr.avr_t_io_irq_set)
    __swig_getmethods__["r"] = _simavr.avr_t_io_r_get
    if _newclass:
        r = _swig_property(_simavr.avr_t_io_r_get)
    __swig_getmethods__["w"] = _simavr.avr_t_io_w_get
    if _newclass:
        w = _swig_property(_simavr.avr_t_io_w_get)

    def __init__(self):
        this = _simavr.new_avr_t_io()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t_io
    __del__ = lambda self: None
avr_t_io_swigregister = _simavr.avr_t_io_swigregister
avr_t_io_swigregister(avr_t_io)

class avr_t_io_w(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t_io_w, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t_io_w, name)
    __repr__ = _swig_repr
    __swig_setmethods__["param"] = _simavr.avr_t_io_w_param_set
    __swig_getmethods__["param"] = _simavr.avr_t_io_w_param_get
    if _newclass:
        param = _swig_property(_simavr.avr_t_io_w_param_get, _simavr.avr_t_io_w_param_set)
    __swig_setmethods__["c"] = _simavr.avr_t_io_w_c_set
    __swig_getmethods__["c"] = _simavr.avr_t_io_w_c_get
    if _newclass:
        c = _swig_property(_simavr.avr_t_io_w_c_get, _simavr.avr_t_io_w_c_set)

    def __init__(self):
        this = _simavr.new_avr_t_io_w()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t_io_w
    __del__ = lambda self: None
avr_t_io_w_swigregister = _simavr.avr_t_io_w_swigregister
avr_t_io_w_swigregister(avr_t_io_w)

class avr_t_io_r(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t_io_r, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t_io_r, name)
    __repr__ = _swig_repr
    __swig_setmethods__["param"] = _simavr.avr_t_io_r_param_set
    __swig_getmethods__["param"] = _simavr.avr_t_io_r_param_get
    if _newclass:
        param = _swig_property(_simavr.avr_t_io_r_param_get, _simavr.avr_t_io_r_param_set)
    __swig_setmethods__["c"] = _simavr.avr_t_io_r_c_set
    __swig_getmethods__["c"] = _simavr.avr_t_io_r_c_get
    if _newclass:
        c = _swig_property(_simavr.avr_t_io_r_c_get, _simavr.avr_t_io_r_c_set)

    def __init__(self):
        this = _simavr.new_avr_t_io_r()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t_io_r
    __del__ = lambda self: None
avr_t_io_r_swigregister = _simavr.avr_t_io_r_swigregister
avr_t_io_r_swigregister(avr_t_io_r)

class avr_t_custom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_t_custom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_t_custom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init"] = _simavr.avr_t_custom_init_set
    __swig_getmethods__["init"] = _simavr.avr_t_custom_init_get
    if _newclass:
        init = _swig_property(_simavr.avr_t_custom_init_get, _simavr.avr_t_custom_init_set)
    __swig_setmethods__["deinit"] = _simavr.avr_t_custom_deinit_set
    __swig_getmethods__["deinit"] = _simavr.avr_t_custom_deinit_get
    if _newclass:
        deinit = _swig_property(_simavr.avr_t_custom_deinit_get, _simavr.avr_t_custom_deinit_set)
    __swig_setmethods__["data"] = _simavr.avr_t_custom_data_set
    __swig_getmethods__["data"] = _simavr.avr_t_custom_data_get
    if _newclass:
        data = _swig_property(_simavr.avr_t_custom_data_get, _simavr.avr_t_custom_data_set)

    def __init__(self):
        this = _simavr.new_avr_t_custom()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_t_custom
    __del__ = lambda self: None
avr_t_custom_swigregister = _simavr.avr_t_custom_swigregister
avr_t_custom_swigregister(avr_t_custom)

class avr_kind_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_kind_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_kind_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["names"] = _simavr.avr_kind_t_names_set
    __swig_getmethods__["names"] = _simavr.avr_kind_t_names_get
    if _newclass:
        names = _swig_property(_simavr.avr_kind_t_names_get, _simavr.avr_kind_t_names_set)
    __swig_setmethods__["make"] = _simavr.avr_kind_t_make_set
    __swig_getmethods__["make"] = _simavr.avr_kind_t_make_get
    if _newclass:
        make = _swig_property(_simavr.avr_kind_t_make_get, _simavr.avr_kind_t_make_set)

    def __init__(self):
        this = _simavr.new_avr_kind_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_kind_t
    __del__ = lambda self: None
avr_kind_t_swigregister = _simavr.avr_kind_t_swigregister
avr_kind_t_swigregister(avr_kind_t)

class avr_symbol_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_symbol_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_symbol_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _simavr.avr_symbol_t_addr_set
    __swig_getmethods__["addr"] = _simavr.avr_symbol_t_addr_get
    if _newclass:
        addr = _swig_property(_simavr.avr_symbol_t_addr_get, _simavr.avr_symbol_t_addr_set)
    __swig_getmethods__["symbol"] = _simavr.avr_symbol_t_symbol_get
    if _newclass:
        symbol = _swig_property(_simavr.avr_symbol_t_symbol_get)

    def __init__(self):
        this = _simavr.new_avr_symbol_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_symbol_t
    __del__ = lambda self: None
avr_symbol_t_swigregister = _simavr.avr_symbol_t_swigregister
avr_symbol_t_swigregister(avr_symbol_t)


def avr_make_mcu_by_name(name):
    return _simavr.avr_make_mcu_by_name(name)
avr_make_mcu_by_name = _simavr.avr_make_mcu_by_name

def avr_init(avr):
    return _simavr.avr_init(avr)
avr_init = _simavr.avr_init

def avr_core_allocate(core, coreLen):
    return _simavr.avr_core_allocate(core, coreLen)
avr_core_allocate = _simavr.avr_core_allocate

def avr_reset(avr):
    return _simavr.avr_reset(avr)
avr_reset = _simavr.avr_reset

def avr_run(avr):
    return _simavr.avr_run(avr)
avr_run = _simavr.avr_run

def avr_terminate(avr):
    return _simavr.avr_terminate(avr)
avr_terminate = _simavr.avr_terminate

def avr_set_command_register(avr, addr):
    return _simavr.avr_set_command_register(avr, addr)
avr_set_command_register = _simavr.avr_set_command_register

def avr_set_console_register(avr, addr):
    return _simavr.avr_set_console_register(avr, addr)
avr_set_console_register = _simavr.avr_set_console_register

def avr_loadcode(avr, code, size, address):
    return _simavr.avr_loadcode(avr, code, size, address)
avr_loadcode = _simavr.avr_loadcode

def avr_core_watch_write(avr, addr, v):
    return _simavr.avr_core_watch_write(avr, addr, v)
avr_core_watch_write = _simavr.avr_core_watch_write

def avr_core_watch_read(avr, addr):
    return _simavr.avr_core_watch_read(avr, addr)
avr_core_watch_read = _simavr.avr_core_watch_read

def avr_sadly_crashed(avr, signal):
    return _simavr.avr_sadly_crashed(avr, signal)
avr_sadly_crashed = _simavr.avr_sadly_crashed

def avr_global_logger(avr, level, format):
    return _simavr.avr_global_logger(avr, level, format)
avr_global_logger = _simavr.avr_global_logger

def avr_global_logger_set(logger):
    return _simavr.avr_global_logger_set(logger)
avr_global_logger_set = _simavr.avr_global_logger_set

def avr_global_logger_get():
    return _simavr.avr_global_logger_get()
avr_global_logger_get = _simavr.avr_global_logger_get

def avr_callback_sleep_gdb(avr, howLong):
    return _simavr.avr_callback_sleep_gdb(avr, howLong)
avr_callback_sleep_gdb = _simavr.avr_callback_sleep_gdb

def avr_callback_run_gdb(avr):
    return _simavr.avr_callback_run_gdb(avr)
avr_callback_run_gdb = _simavr.avr_callback_run_gdb

def avr_callback_sleep_raw(avr, howLong):
    return _simavr.avr_callback_sleep_raw(avr, howLong)
avr_callback_sleep_raw = _simavr.avr_callback_sleep_raw

def avr_callback_run_raw(avr):
    return _simavr.avr_callback_run_raw(avr)
avr_callback_run_raw = _simavr.avr_callback_run_raw

def avr_pending_sleep_usec(avr, howLong):
    return _simavr.avr_pending_sleep_usec(avr, howLong)
avr_pending_sleep_usec = _simavr.avr_pending_sleep_usec

_simavr.IOPORT_IRQ_PIN0_swigconstant(_simavr)
IOPORT_IRQ_PIN0 = _simavr.IOPORT_IRQ_PIN0

_simavr.IOPORT_IRQ_PIN1_swigconstant(_simavr)
IOPORT_IRQ_PIN1 = _simavr.IOPORT_IRQ_PIN1

_simavr.IOPORT_IRQ_PIN2_swigconstant(_simavr)
IOPORT_IRQ_PIN2 = _simavr.IOPORT_IRQ_PIN2

_simavr.IOPORT_IRQ_PIN3_swigconstant(_simavr)
IOPORT_IRQ_PIN3 = _simavr.IOPORT_IRQ_PIN3

_simavr.IOPORT_IRQ_PIN4_swigconstant(_simavr)
IOPORT_IRQ_PIN4 = _simavr.IOPORT_IRQ_PIN4

_simavr.IOPORT_IRQ_PIN5_swigconstant(_simavr)
IOPORT_IRQ_PIN5 = _simavr.IOPORT_IRQ_PIN5

_simavr.IOPORT_IRQ_PIN6_swigconstant(_simavr)
IOPORT_IRQ_PIN6 = _simavr.IOPORT_IRQ_PIN6

_simavr.IOPORT_IRQ_PIN7_swigconstant(_simavr)
IOPORT_IRQ_PIN7 = _simavr.IOPORT_IRQ_PIN7

_simavr.IOPORT_IRQ_PIN_ALL_swigconstant(_simavr)
IOPORT_IRQ_PIN_ALL = _simavr.IOPORT_IRQ_PIN_ALL

_simavr.IOPORT_IRQ_DIRECTION_ALL_swigconstant(_simavr)
IOPORT_IRQ_DIRECTION_ALL = _simavr.IOPORT_IRQ_DIRECTION_ALL

_simavr.IOPORT_IRQ_REG_PORT_swigconstant(_simavr)
IOPORT_IRQ_REG_PORT = _simavr.IOPORT_IRQ_REG_PORT

_simavr.IOPORT_IRQ_REG_PIN_swigconstant(_simavr)
IOPORT_IRQ_REG_PIN = _simavr.IOPORT_IRQ_REG_PIN

_simavr.IOPORT_IRQ_COUNT_swigconstant(_simavr)
IOPORT_IRQ_COUNT = _simavr.IOPORT_IRQ_COUNT

_simavr.AVR_IOPORT_OUTPUT_swigconstant(_simavr)
AVR_IOPORT_OUTPUT = _simavr.AVR_IOPORT_OUTPUT
class avr_ioport_getirq_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_ioport_getirq_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_ioport_getirq_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bit"] = _simavr.avr_ioport_getirq_t_bit_set
    __swig_getmethods__["bit"] = _simavr.avr_ioport_getirq_t_bit_get
    if _newclass:
        bit = _swig_property(_simavr.avr_ioport_getirq_t_bit_get, _simavr.avr_ioport_getirq_t_bit_set)
    __swig_setmethods__["irq"] = _simavr.avr_ioport_getirq_t_irq_set
    __swig_getmethods__["irq"] = _simavr.avr_ioport_getirq_t_irq_get
    if _newclass:
        irq = _swig_property(_simavr.avr_ioport_getirq_t_irq_get, _simavr.avr_ioport_getirq_t_irq_set)

    def __init__(self):
        this = _simavr.new_avr_ioport_getirq_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_ioport_getirq_t
    __del__ = lambda self: None
avr_ioport_getirq_t_swigregister = _simavr.avr_ioport_getirq_t_swigregister
avr_ioport_getirq_t_swigregister(avr_ioport_getirq_t)

class avr_ioport_state_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_ioport_state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_ioport_state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _simavr.avr_ioport_state_t_name_set
    __swig_getmethods__["name"] = _simavr.avr_ioport_state_t_name_get
    if _newclass:
        name = _swig_property(_simavr.avr_ioport_state_t_name_get, _simavr.avr_ioport_state_t_name_set)
    __swig_setmethods__["port"] = _simavr.avr_ioport_state_t_port_set
    __swig_getmethods__["port"] = _simavr.avr_ioport_state_t_port_get
    if _newclass:
        port = _swig_property(_simavr.avr_ioport_state_t_port_get, _simavr.avr_ioport_state_t_port_set)
    __swig_setmethods__["ddr"] = _simavr.avr_ioport_state_t_ddr_set
    __swig_getmethods__["ddr"] = _simavr.avr_ioport_state_t_ddr_get
    if _newclass:
        ddr = _swig_property(_simavr.avr_ioport_state_t_ddr_get, _simavr.avr_ioport_state_t_ddr_set)
    __swig_setmethods__["pin"] = _simavr.avr_ioport_state_t_pin_set
    __swig_getmethods__["pin"] = _simavr.avr_ioport_state_t_pin_get
    if _newclass:
        pin = _swig_property(_simavr.avr_ioport_state_t_pin_get, _simavr.avr_ioport_state_t_pin_set)

    def __init__(self):
        this = _simavr.new_avr_ioport_state_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_ioport_state_t
    __del__ = lambda self: None
avr_ioport_state_t_swigregister = _simavr.avr_ioport_state_t_swigregister
avr_ioport_state_t_swigregister(avr_ioport_state_t)

class avr_ioport_external_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_ioport_external_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_ioport_external_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _simavr.avr_ioport_external_t_name_set
    __swig_getmethods__["name"] = _simavr.avr_ioport_external_t_name_get
    if _newclass:
        name = _swig_property(_simavr.avr_ioport_external_t_name_get, _simavr.avr_ioport_external_t_name_set)
    __swig_setmethods__["mask"] = _simavr.avr_ioport_external_t_mask_set
    __swig_getmethods__["mask"] = _simavr.avr_ioport_external_t_mask_get
    if _newclass:
        mask = _swig_property(_simavr.avr_ioport_external_t_mask_get, _simavr.avr_ioport_external_t_mask_set)
    __swig_setmethods__["value"] = _simavr.avr_ioport_external_t_value_set
    __swig_getmethods__["value"] = _simavr.avr_ioport_external_t_value_get
    if _newclass:
        value = _swig_property(_simavr.avr_ioport_external_t_value_get, _simavr.avr_ioport_external_t_value_set)

    def __init__(self):
        this = _simavr.new_avr_ioport_external_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_ioport_external_t
    __del__ = lambda self: None
avr_ioport_external_t_swigregister = _simavr.avr_ioport_external_t_swigregister
avr_ioport_external_t_swigregister(avr_ioport_external_t)

class avr_iopin_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_iopin_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_iopin_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _simavr.avr_iopin_t_port_set
    __swig_getmethods__["port"] = _simavr.avr_iopin_t_port_get
    if _newclass:
        port = _swig_property(_simavr.avr_iopin_t_port_get, _simavr.avr_iopin_t_port_set)
    __swig_setmethods__["pin"] = _simavr.avr_iopin_t_pin_set
    __swig_getmethods__["pin"] = _simavr.avr_iopin_t_pin_get
    if _newclass:
        pin = _swig_property(_simavr.avr_iopin_t_pin_get, _simavr.avr_iopin_t_pin_set)

    def __init__(self):
        this = _simavr.new_avr_iopin_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_iopin_t
    __del__ = lambda self: None
avr_iopin_t_swigregister = _simavr.avr_iopin_t_swigregister
avr_iopin_t_swigregister(avr_iopin_t)

class avr_ioport_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_ioport_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_ioport_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["io"] = _simavr.avr_ioport_t_io_set
    __swig_getmethods__["io"] = _simavr.avr_ioport_t_io_get
    if _newclass:
        io = _swig_property(_simavr.avr_ioport_t_io_get, _simavr.avr_ioport_t_io_set)
    __swig_setmethods__["name"] = _simavr.avr_ioport_t_name_set
    __swig_getmethods__["name"] = _simavr.avr_ioport_t_name_get
    if _newclass:
        name = _swig_property(_simavr.avr_ioport_t_name_get, _simavr.avr_ioport_t_name_set)
    __swig_setmethods__["r_port"] = _simavr.avr_ioport_t_r_port_set
    __swig_getmethods__["r_port"] = _simavr.avr_ioport_t_r_port_get
    if _newclass:
        r_port = _swig_property(_simavr.avr_ioport_t_r_port_get, _simavr.avr_ioport_t_r_port_set)
    __swig_setmethods__["r_ddr"] = _simavr.avr_ioport_t_r_ddr_set
    __swig_getmethods__["r_ddr"] = _simavr.avr_ioport_t_r_ddr_get
    if _newclass:
        r_ddr = _swig_property(_simavr.avr_ioport_t_r_ddr_get, _simavr.avr_ioport_t_r_ddr_set)
    __swig_setmethods__["r_pin"] = _simavr.avr_ioport_t_r_pin_set
    __swig_getmethods__["r_pin"] = _simavr.avr_ioport_t_r_pin_get
    if _newclass:
        r_pin = _swig_property(_simavr.avr_ioport_t_r_pin_get, _simavr.avr_ioport_t_r_pin_set)
    __swig_setmethods__["pcint"] = _simavr.avr_ioport_t_pcint_set
    __swig_getmethods__["pcint"] = _simavr.avr_ioport_t_pcint_get
    if _newclass:
        pcint = _swig_property(_simavr.avr_ioport_t_pcint_get, _simavr.avr_ioport_t_pcint_set)
    __swig_setmethods__["r_pcint"] = _simavr.avr_ioport_t_r_pcint_set
    __swig_getmethods__["r_pcint"] = _simavr.avr_ioport_t_r_pcint_get
    if _newclass:
        r_pcint = _swig_property(_simavr.avr_ioport_t_r_pcint_get, _simavr.avr_ioport_t_r_pcint_set)
    __swig_getmethods__["external"] = _simavr.avr_ioport_t_external_get
    if _newclass:
        external = _swig_property(_simavr.avr_ioport_t_external_get)

    def __init__(self):
        this = _simavr.new_avr_ioport_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_ioport_t
    __del__ = lambda self: None
avr_ioport_t_swigregister = _simavr.avr_ioport_t_swigregister
avr_ioport_t_swigregister(avr_ioport_t)

class avr_ioport_t_external(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_ioport_t_external, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_ioport_t_external, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pull_mask"] = _simavr.avr_ioport_t_external_pull_mask_set
    __swig_getmethods__["pull_mask"] = _simavr.avr_ioport_t_external_pull_mask_get
    if _newclass:
        pull_mask = _swig_property(_simavr.avr_ioport_t_external_pull_mask_get, _simavr.avr_ioport_t_external_pull_mask_set)
    __swig_setmethods__["pull_value"] = _simavr.avr_ioport_t_external_pull_value_set
    __swig_getmethods__["pull_value"] = _simavr.avr_ioport_t_external_pull_value_get
    if _newclass:
        pull_value = _swig_property(_simavr.avr_ioport_t_external_pull_value_get, _simavr.avr_ioport_t_external_pull_value_set)

    def __init__(self):
        this = _simavr.new_avr_ioport_t_external()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_ioport_t_external
    __del__ = lambda self: None
avr_ioport_t_external_swigregister = _simavr.avr_ioport_t_external_swigregister
avr_ioport_t_external_swigregister(avr_ioport_t_external)


def avr_ioport_init(avr, port):
    return _simavr.avr_ioport_init(avr, port)
avr_ioport_init = _simavr.avr_ioport_init

_simavr.ELF_SYMBOLS_swigconstant(_simavr)
ELF_SYMBOLS = _simavr.ELF_SYMBOLS

_simavr.AVR_SEGMENT_OFFSET_FLASH_swigconstant(_simavr)
AVR_SEGMENT_OFFSET_FLASH = _simavr.AVR_SEGMENT_OFFSET_FLASH

_simavr.AVR_SEGMENT_OFFSET_EEPROM_swigconstant(_simavr)
AVR_SEGMENT_OFFSET_EEPROM = _simavr.AVR_SEGMENT_OFFSET_EEPROM
class elf_firmware_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elf_firmware_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elf_firmware_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mmcu"] = _simavr.elf_firmware_t_mmcu_set
    __swig_getmethods__["mmcu"] = _simavr.elf_firmware_t_mmcu_get
    if _newclass:
        mmcu = _swig_property(_simavr.elf_firmware_t_mmcu_get, _simavr.elf_firmware_t_mmcu_set)
    __swig_setmethods__["frequency"] = _simavr.elf_firmware_t_frequency_set
    __swig_getmethods__["frequency"] = _simavr.elf_firmware_t_frequency_get
    if _newclass:
        frequency = _swig_property(_simavr.elf_firmware_t_frequency_get, _simavr.elf_firmware_t_frequency_set)
    __swig_setmethods__["vcc"] = _simavr.elf_firmware_t_vcc_set
    __swig_getmethods__["vcc"] = _simavr.elf_firmware_t_vcc_get
    if _newclass:
        vcc = _swig_property(_simavr.elf_firmware_t_vcc_get, _simavr.elf_firmware_t_vcc_set)
    __swig_setmethods__["avcc"] = _simavr.elf_firmware_t_avcc_set
    __swig_getmethods__["avcc"] = _simavr.elf_firmware_t_avcc_get
    if _newclass:
        avcc = _swig_property(_simavr.elf_firmware_t_avcc_get, _simavr.elf_firmware_t_avcc_set)
    __swig_setmethods__["aref"] = _simavr.elf_firmware_t_aref_set
    __swig_getmethods__["aref"] = _simavr.elf_firmware_t_aref_get
    if _newclass:
        aref = _swig_property(_simavr.elf_firmware_t_aref_get, _simavr.elf_firmware_t_aref_set)
    __swig_setmethods__["tracename"] = _simavr.elf_firmware_t_tracename_set
    __swig_getmethods__["tracename"] = _simavr.elf_firmware_t_tracename_get
    if _newclass:
        tracename = _swig_property(_simavr.elf_firmware_t_tracename_get, _simavr.elf_firmware_t_tracename_set)
    __swig_setmethods__["traceperiod"] = _simavr.elf_firmware_t_traceperiod_set
    __swig_getmethods__["traceperiod"] = _simavr.elf_firmware_t_traceperiod_get
    if _newclass:
        traceperiod = _swig_property(_simavr.elf_firmware_t_traceperiod_get, _simavr.elf_firmware_t_traceperiod_set)
    __swig_setmethods__["tracecount"] = _simavr.elf_firmware_t_tracecount_set
    __swig_getmethods__["tracecount"] = _simavr.elf_firmware_t_tracecount_get
    if _newclass:
        tracecount = _swig_property(_simavr.elf_firmware_t_tracecount_get, _simavr.elf_firmware_t_tracecount_set)
    __swig_getmethods__["trace"] = _simavr.elf_firmware_t_trace_get
    if _newclass:
        trace = _swig_property(_simavr.elf_firmware_t_trace_get)
    __swig_getmethods__["external_state"] = _simavr.elf_firmware_t_external_state_get
    if _newclass:
        external_state = _swig_property(_simavr.elf_firmware_t_external_state_get)
    __swig_setmethods__["command_register_addr"] = _simavr.elf_firmware_t_command_register_addr_set
    __swig_getmethods__["command_register_addr"] = _simavr.elf_firmware_t_command_register_addr_get
    if _newclass:
        command_register_addr = _swig_property(_simavr.elf_firmware_t_command_register_addr_get, _simavr.elf_firmware_t_command_register_addr_set)
    __swig_setmethods__["console_register_addr"] = _simavr.elf_firmware_t_console_register_addr_set
    __swig_getmethods__["console_register_addr"] = _simavr.elf_firmware_t_console_register_addr_get
    if _newclass:
        console_register_addr = _swig_property(_simavr.elf_firmware_t_console_register_addr_get, _simavr.elf_firmware_t_console_register_addr_set)
    __swig_setmethods__["flashbase"] = _simavr.elf_firmware_t_flashbase_set
    __swig_getmethods__["flashbase"] = _simavr.elf_firmware_t_flashbase_get
    if _newclass:
        flashbase = _swig_property(_simavr.elf_firmware_t_flashbase_get, _simavr.elf_firmware_t_flashbase_set)
    __swig_setmethods__["flash"] = _simavr.elf_firmware_t_flash_set
    __swig_getmethods__["flash"] = _simavr.elf_firmware_t_flash_get
    if _newclass:
        flash = _swig_property(_simavr.elf_firmware_t_flash_get, _simavr.elf_firmware_t_flash_set)
    __swig_setmethods__["flashsize"] = _simavr.elf_firmware_t_flashsize_set
    __swig_getmethods__["flashsize"] = _simavr.elf_firmware_t_flashsize_get
    if _newclass:
        flashsize = _swig_property(_simavr.elf_firmware_t_flashsize_get, _simavr.elf_firmware_t_flashsize_set)
    __swig_setmethods__["datasize"] = _simavr.elf_firmware_t_datasize_set
    __swig_getmethods__["datasize"] = _simavr.elf_firmware_t_datasize_get
    if _newclass:
        datasize = _swig_property(_simavr.elf_firmware_t_datasize_get, _simavr.elf_firmware_t_datasize_set)
    __swig_setmethods__["bsssize"] = _simavr.elf_firmware_t_bsssize_set
    __swig_getmethods__["bsssize"] = _simavr.elf_firmware_t_bsssize_get
    if _newclass:
        bsssize = _swig_property(_simavr.elf_firmware_t_bsssize_get, _simavr.elf_firmware_t_bsssize_set)
    __swig_setmethods__["eeprom"] = _simavr.elf_firmware_t_eeprom_set
    __swig_getmethods__["eeprom"] = _simavr.elf_firmware_t_eeprom_get
    if _newclass:
        eeprom = _swig_property(_simavr.elf_firmware_t_eeprom_get, _simavr.elf_firmware_t_eeprom_set)
    __swig_setmethods__["eesize"] = _simavr.elf_firmware_t_eesize_set
    __swig_getmethods__["eesize"] = _simavr.elf_firmware_t_eesize_get
    if _newclass:
        eesize = _swig_property(_simavr.elf_firmware_t_eesize_get, _simavr.elf_firmware_t_eesize_set)
    __swig_setmethods__["symbol"] = _simavr.elf_firmware_t_symbol_set
    __swig_getmethods__["symbol"] = _simavr.elf_firmware_t_symbol_get
    if _newclass:
        symbol = _swig_property(_simavr.elf_firmware_t_symbol_get, _simavr.elf_firmware_t_symbol_set)
    __swig_setmethods__["symbolcount"] = _simavr.elf_firmware_t_symbolcount_set
    __swig_getmethods__["symbolcount"] = _simavr.elf_firmware_t_symbolcount_get
    if _newclass:
        symbolcount = _swig_property(_simavr.elf_firmware_t_symbolcount_get, _simavr.elf_firmware_t_symbolcount_set)

    def __init__(self):
        this = _simavr.new_elf_firmware_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_elf_firmware_t
    __del__ = lambda self: None
elf_firmware_t_swigregister = _simavr.elf_firmware_t_swigregister
elf_firmware_t_swigregister(elf_firmware_t)

class elf_firmware_t_external_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elf_firmware_t_external_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elf_firmware_t_external_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["port"] = _simavr.elf_firmware_t_external_state_port_set
    __swig_getmethods__["port"] = _simavr.elf_firmware_t_external_state_port_get
    if _newclass:
        port = _swig_property(_simavr.elf_firmware_t_external_state_port_get, _simavr.elf_firmware_t_external_state_port_set)
    __swig_setmethods__["mask"] = _simavr.elf_firmware_t_external_state_mask_set
    __swig_getmethods__["mask"] = _simavr.elf_firmware_t_external_state_mask_get
    if _newclass:
        mask = _swig_property(_simavr.elf_firmware_t_external_state_mask_get, _simavr.elf_firmware_t_external_state_mask_set)
    __swig_setmethods__["value"] = _simavr.elf_firmware_t_external_state_value_set
    __swig_getmethods__["value"] = _simavr.elf_firmware_t_external_state_value_get
    if _newclass:
        value = _swig_property(_simavr.elf_firmware_t_external_state_value_get, _simavr.elf_firmware_t_external_state_value_set)

    def __init__(self):
        this = _simavr.new_elf_firmware_t_external_state()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_elf_firmware_t_external_state
    __del__ = lambda self: None
elf_firmware_t_external_state_swigregister = _simavr.elf_firmware_t_external_state_swigregister
elf_firmware_t_external_state_swigregister(elf_firmware_t_external_state)

class elf_firmware_t_trace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, elf_firmware_t_trace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, elf_firmware_t_trace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mask"] = _simavr.elf_firmware_t_trace_mask_set
    __swig_getmethods__["mask"] = _simavr.elf_firmware_t_trace_mask_get
    if _newclass:
        mask = _swig_property(_simavr.elf_firmware_t_trace_mask_get, _simavr.elf_firmware_t_trace_mask_set)
    __swig_setmethods__["addr"] = _simavr.elf_firmware_t_trace_addr_set
    __swig_getmethods__["addr"] = _simavr.elf_firmware_t_trace_addr_get
    if _newclass:
        addr = _swig_property(_simavr.elf_firmware_t_trace_addr_get, _simavr.elf_firmware_t_trace_addr_set)
    __swig_setmethods__["name"] = _simavr.elf_firmware_t_trace_name_set
    __swig_getmethods__["name"] = _simavr.elf_firmware_t_trace_name_get
    if _newclass:
        name = _swig_property(_simavr.elf_firmware_t_trace_name_get, _simavr.elf_firmware_t_trace_name_set)

    def __init__(self):
        this = _simavr.new_elf_firmware_t_trace()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_elf_firmware_t_trace
    __del__ = lambda self: None
elf_firmware_t_trace_swigregister = _simavr.elf_firmware_t_trace_swigregister
elf_firmware_t_trace_swigregister(elf_firmware_t_trace)


def elf_read_firmware(file, firmware):
    return _simavr.elf_read_firmware(file, firmware)
elf_read_firmware = _simavr.elf_read_firmware

def avr_load_firmware(avr, firmware):
    return _simavr.avr_load_firmware(avr, firmware)
avr_load_firmware = _simavr.avr_load_firmware

_simavr.AVR_GDB_BREAK_SOFT_swigconstant(_simavr)
AVR_GDB_BREAK_SOFT = _simavr.AVR_GDB_BREAK_SOFT

_simavr.AVR_GDB_BREAK_HARD_swigconstant(_simavr)
AVR_GDB_BREAK_HARD = _simavr.AVR_GDB_BREAK_HARD

_simavr.AVR_GDB_WATCH_WRITE_swigconstant(_simavr)
AVR_GDB_WATCH_WRITE = _simavr.AVR_GDB_WATCH_WRITE

_simavr.AVR_GDB_WATCH_READ_swigconstant(_simavr)
AVR_GDB_WATCH_READ = _simavr.AVR_GDB_WATCH_READ

_simavr.AVR_GDB_WATCH_ACCESS_swigconstant(_simavr)
AVR_GDB_WATCH_ACCESS = _simavr.AVR_GDB_WATCH_ACCESS

def avr_gdb_init(avr):
    return _simavr.avr_gdb_init(avr)
avr_gdb_init = _simavr.avr_gdb_init

def avr_deinit_gdb(avr):
    return _simavr.avr_deinit_gdb(avr)
avr_deinit_gdb = _simavr.avr_deinit_gdb

def avr_gdb_processor(avr, sleep):
    return _simavr.avr_gdb_processor(avr, sleep)
avr_gdb_processor = _simavr.avr_gdb_processor

def avr_gdb_handle_watchpoints(g, addr, type):
    return _simavr.avr_gdb_handle_watchpoints(g, addr, type)
avr_gdb_handle_watchpoints = _simavr.avr_gdb_handle_watchpoints

_simavr.AVR_VCD_MAX_SIGNALS_swigconstant(_simavr)
AVR_VCD_MAX_SIGNALS = _simavr.AVR_VCD_MAX_SIGNALS
class avr_vcd_signal_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_vcd_signal_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_vcd_signal_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["irq"] = _simavr.avr_vcd_signal_t_irq_set
    __swig_getmethods__["irq"] = _simavr.avr_vcd_signal_t_irq_get
    if _newclass:
        irq = _swig_property(_simavr.avr_vcd_signal_t_irq_get, _simavr.avr_vcd_signal_t_irq_set)
    __swig_setmethods__["alias"] = _simavr.avr_vcd_signal_t_alias_set
    __swig_getmethods__["alias"] = _simavr.avr_vcd_signal_t_alias_get
    if _newclass:
        alias = _swig_property(_simavr.avr_vcd_signal_t_alias_get, _simavr.avr_vcd_signal_t_alias_set)
    __swig_setmethods__["size"] = _simavr.avr_vcd_signal_t_size_set
    __swig_getmethods__["size"] = _simavr.avr_vcd_signal_t_size_get
    if _newclass:
        size = _swig_property(_simavr.avr_vcd_signal_t_size_get, _simavr.avr_vcd_signal_t_size_set)
    __swig_setmethods__["name"] = _simavr.avr_vcd_signal_t_name_set
    __swig_getmethods__["name"] = _simavr.avr_vcd_signal_t_name_get
    if _newclass:
        name = _swig_property(_simavr.avr_vcd_signal_t_name_get, _simavr.avr_vcd_signal_t_name_set)

    def __init__(self):
        this = _simavr.new_avr_vcd_signal_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_vcd_signal_t
    __del__ = lambda self: None
avr_vcd_signal_t_swigregister = _simavr.avr_vcd_signal_t_swigregister
avr_vcd_signal_t_swigregister(avr_vcd_signal_t)

class avr_vcd_log_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_vcd_log_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_vcd_log_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["when"] = _simavr.avr_vcd_log_t_when_set
    __swig_getmethods__["when"] = _simavr.avr_vcd_log_t_when_get
    if _newclass:
        when = _swig_property(_simavr.avr_vcd_log_t_when_get, _simavr.avr_vcd_log_t_when_set)
    __swig_setmethods__["signal"] = _simavr.avr_vcd_log_t_signal_set
    __swig_getmethods__["signal"] = _simavr.avr_vcd_log_t_signal_get
    if _newclass:
        signal = _swig_property(_simavr.avr_vcd_log_t_signal_get, _simavr.avr_vcd_log_t_signal_set)
    __swig_setmethods__["value"] = _simavr.avr_vcd_log_t_value_set
    __swig_getmethods__["value"] = _simavr.avr_vcd_log_t_value_get
    if _newclass:
        value = _swig_property(_simavr.avr_vcd_log_t_value_get, _simavr.avr_vcd_log_t_value_set)

    def __init__(self):
        this = _simavr.new_avr_vcd_log_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_vcd_log_t
    __del__ = lambda self: None
avr_vcd_log_t_swigregister = _simavr.avr_vcd_log_t_swigregister
avr_vcd_log_t_swigregister(avr_vcd_log_t)

class avr_vcd_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avr_vcd_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avr_vcd_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avr"] = _simavr.avr_vcd_t_avr_set
    __swig_getmethods__["avr"] = _simavr.avr_vcd_t_avr_get
    if _newclass:
        avr = _swig_property(_simavr.avr_vcd_t_avr_get, _simavr.avr_vcd_t_avr_set)
    __swig_setmethods__["filename"] = _simavr.avr_vcd_t_filename_set
    __swig_getmethods__["filename"] = _simavr.avr_vcd_t_filename_get
    if _newclass:
        filename = _swig_property(_simavr.avr_vcd_t_filename_get, _simavr.avr_vcd_t_filename_set)
    __swig_setmethods__["output"] = _simavr.avr_vcd_t_output_set
    __swig_getmethods__["output"] = _simavr.avr_vcd_t_output_get
    if _newclass:
        output = _swig_property(_simavr.avr_vcd_t_output_get, _simavr.avr_vcd_t_output_set)
    __swig_setmethods__["signal_count"] = _simavr.avr_vcd_t_signal_count_set
    __swig_getmethods__["signal_count"] = _simavr.avr_vcd_t_signal_count_get
    if _newclass:
        signal_count = _swig_property(_simavr.avr_vcd_t_signal_count_get, _simavr.avr_vcd_t_signal_count_set)
    __swig_setmethods__["signal"] = _simavr.avr_vcd_t_signal_set
    __swig_getmethods__["signal"] = _simavr.avr_vcd_t_signal_get
    if _newclass:
        signal = _swig_property(_simavr.avr_vcd_t_signal_get, _simavr.avr_vcd_t_signal_set)
    __swig_setmethods__["period"] = _simavr.avr_vcd_t_period_set
    __swig_getmethods__["period"] = _simavr.avr_vcd_t_period_get
    if _newclass:
        period = _swig_property(_simavr.avr_vcd_t_period_get, _simavr.avr_vcd_t_period_set)
    __swig_setmethods__["start"] = _simavr.avr_vcd_t_start_set
    __swig_getmethods__["start"] = _simavr.avr_vcd_t_start_get
    if _newclass:
        start = _swig_property(_simavr.avr_vcd_t_start_get, _simavr.avr_vcd_t_start_set)
    __swig_setmethods__["logsize"] = _simavr.avr_vcd_t_logsize_set
    __swig_getmethods__["logsize"] = _simavr.avr_vcd_t_logsize_get
    if _newclass:
        logsize = _swig_property(_simavr.avr_vcd_t_logsize_get, _simavr.avr_vcd_t_logsize_set)
    __swig_setmethods__["logindex"] = _simavr.avr_vcd_t_logindex_set
    __swig_getmethods__["logindex"] = _simavr.avr_vcd_t_logindex_get
    if _newclass:
        logindex = _swig_property(_simavr.avr_vcd_t_logindex_get, _simavr.avr_vcd_t_logindex_set)
    __swig_setmethods__["log"] = _simavr.avr_vcd_t_log_set
    __swig_getmethods__["log"] = _simavr.avr_vcd_t_log_get
    if _newclass:
        log = _swig_property(_simavr.avr_vcd_t_log_get, _simavr.avr_vcd_t_log_set)

    def __init__(self):
        this = _simavr.new_avr_vcd_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _simavr.delete_avr_vcd_t
    __del__ = lambda self: None
avr_vcd_t_swigregister = _simavr.avr_vcd_t_swigregister
avr_vcd_t_swigregister(avr_vcd_t)


def avr_vcd_init(avr, filename, vcd, period):
    return _simavr.avr_vcd_init(avr, filename, vcd, period)
avr_vcd_init = _simavr.avr_vcd_init

def avr_vcd_close(vcd):
    return _simavr.avr_vcd_close(vcd)
avr_vcd_close = _simavr.avr_vcd_close

def avr_vcd_add_signal(vcd, signal_irq, signal_bit_size, name):
    return _simavr.avr_vcd_add_signal(vcd, signal_irq, signal_bit_size, name)
avr_vcd_add_signal = _simavr.avr_vcd_add_signal

def avr_vcd_start(vcd):
    return _simavr.avr_vcd_start(vcd)
avr_vcd_start = _simavr.avr_vcd_start

def avr_vcd_stop(vcd):
    return _simavr.avr_vcd_stop(vcd)
avr_vcd_stop = _simavr.avr_vcd_stop
# This file is compatible with both classic and new-style classes.


